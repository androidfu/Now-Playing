apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'hugo'
apply plugin: 'findbugs'

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    defaultConfig {
        applicationId "com.androidfu.foundation"
        minSdkVersion 15
        targetSdkVersion 20
        versionCode 2
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

/* Find more @ http://gradleplease.appspot.com */
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.squareup:otto:1.3.5'                       /* http://square.github.io/otto/ */
    compile 'com.squareup.picasso:picasso:2.3.3'            /* http://square.github.io/picasso/ */
    compile 'com.squareup.retrofit:retrofit:1.6.1'          /* http://square.github.io/retrofit/ */
    compile 'com.squareup.okhttp:okhttp:2.0.0'              /* https://github.com/square/okhttp/wiki/Recipes */
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.jakewharton:butterknife:5.1.1'             /* https://github.com/JakeWharton/butterknife */
    compile 'com.google.code.gson:gson:2.3'               /* https://code.google.com/p/google-gson/ */
    compile "org.parceler:parceler-api:0.2.10"
    provided "org.parceler:parceler:0.2.10"
    //compile 'org.parceler:parceler:0.2.10'                  /* https://github.com/johncarl81/parceler */
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.google.android.gms:play-services:6.5.87'
//    compile 'com.android.support:support-v4:20.0.0'
//    compile 'com.android.support:appcompat-v7:20+'
//    compile 'com.android.support:gridlayout-v7:19.1.0'
//    compile 'com.android.support:mediarouter-v7:19.1.0'
//    compile 'com.android.support:support-v13:20.0.0'
    // compile 'uk.co.chrisjenx:calligraphy:2.0.0           /* https://github.com/chrisjenx/Calligraphy */
}

def toCamelCase(String string) {
    String result = ""
    string.findAll("[^\\W]+") { String word ->
        result += word.capitalize()
    }
    return result
}

afterEvaluate { project ->
    Configuration runtimeConfiguration = project.configurations.getByName('compile')
    ResolutionResult resolution = runtimeConfiguration.incoming.resolutionResult
    // Forces resolve of configuration
    ModuleVersionIdentifier module = resolution.getAllComponents().find { it.moduleVersion.name.equals("play-services") }.moduleVersion

    String prepareTaskName = "prepare${toCamelCase("${module.group} ${module.name} ${module.version}")}Library"
    File playServiceRootFolder = project.tasks.find { it.name.equals(prepareTaskName) }.explodedDir

    Task stripPlayServices = project.tasks.create(name: 'stripPlayServices', group: "Strip") {
        inputs.files new File(playServiceRootFolder, "classes.jar")
        outputs.dir playServiceRootFolder
        description 'Strip useless packages from Google Play Services library to avoid reaching dex limit'

        doLast {
            copy {
                from(file(new File(playServiceRootFolder, "classes.jar")))
                into(file(playServiceRootFolder))
                rename { fileName ->
                    fileName = "classes_orig.jar"
                }
            }
            tasks.create(name: "stripPlayServices" + module.version, type: Jar) {
                destinationDir = playServiceRootFolder
                archiveName = "classes.jar"
                from(zipTree(new File(playServiceRootFolder, "classes_orig.jar"))) {
                    exclude "com/google/ads/**"
                    //exclude "com/google/android/gms/analytics/**"
                    exclude "com/google/android/gms/games/**"
                    exclude "com/google/android/gms/maps/**"
                    exclude "com/google/android/gms/panorama/**"
                    exclude "com/google/android/gms/plus/**"
                    exclude "com/google/android/gms/drive/**"
                    exclude "com/google/android/gms/ads/**"
                    exclude "com/google/android/gms/wallet/**"
                    exclude "com/google/android/gms/wearable/**"
                }
            }.execute()
            delete file(new File(playServiceRootFolder, "classes_orig.jar"))
        }
    }

    project.tasks.findAll { it.name.startsWith('prepare') && it.name.endsWith('Dependencies') }.each { Task task ->
        task.dependsOn stripPlayServices
    }
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {
    excludeFilter file("${project.rootDir}/config/findbugs/exclude.xml")
    classes = fileTree('build/intermediates/classes/debug/')  // Varies based on your app build configs and flavors...
    source = fileTree('src/main/java/')
    classpath = files()
    effort = 'max'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}